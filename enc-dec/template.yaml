apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: java-encryption-microservice
  title: Java Encryption-Decryption Microservice
  description: A Spring Boot microservice template for encryption and decryption operations with Swagger documentation
  tags:
    - recommended
    - java
    - spring-boot
    - microservice
    - encryption
    - swagger
    - openapi
spec:
  owner: platform-team
  type: service
  parameters:
    - title: Provide Information for Application
      required:
        - app_name
        - description
        - owner
      properties:
        app_name:
          title: Name of the Application
          type: string
          description: Unique name of the application
          default: encryption-service
          pattern: "^[a-z0-9-]+$"
        description:
          title: Description
          type: string
          description: Help others understand what this service is for
          default: Java microservice for encryption and decryption operations
        owner:
          title: Owner
          type: string
          description: Owner of the component
          default: platform-team
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose Location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
              - gitlab.com
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./template
        copyWithoutTemplating:
          - .github/workflows/*
        values:
          app_name: ${{ parameters.app_name }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          http_port: 8080

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is ${{ parameters.app_name }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
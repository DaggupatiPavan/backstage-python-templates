name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ '${{ runner.os }}' }}-m2-${{ '${{ hashFiles('**/pom.xml') }}' }}
        restore-keys: ${{ '${{ runner.os }}' }}-m2
        
    - name: Run tests
      run: mvn clean test
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ '${{ runner.os }}' }}-m2-${{ '${{ hashFiles('**/pom.xml') }}' }}
        restore-keys: ${{ '${{ runner.os }}' }}-m2
        
    - name: Build application
      run: mvn clean package -DskipTests
      
    - name: Build Docker image
      run: |
        docker build -t ${{ '${{values.app_name}}' }}:${{ '${{ github.sha }}' }} .
        docker build -t ${{ '${{values.app_name}}' }}:latest .


  cd:
    needs: build
    permissions:
      contents: write
    runs-on: self-hosted
    steps:

      - uses: actions/checkout@v3

      - name: Modify values file
        shell: bash
        run: |
          sudo apt install python3-pip -y
          echo ${{ '${{needs.ci.outputs.commit_id}}' }}
          pip install yq --break-system-packages
          yq -Yi '.image.tag = "${{'${{needs.ci.outputs.commit_id}}' }}"' charts/${{values.app_name}}/values-${{values.app_env}}.yaml

      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          message: 'Updates values.yaml with commit ${{ '${{needs.ci.outputs.commit_id}}' }}'

      - name: Install argocd
        shell: bash
        run: |
          curl -ksSL -o argocd https://localhost:32645/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv ./argocd /usr/local/bin/argocd

      - name: argocd login
        shell: bash
        run: |
          argocd login localhost:32645 \
            --insecure  \
            --grpc-web \
            --username admin \
            --password  ${{ '${{ secrets.ARGOCD_PASSWORD }}' }}

      - name: Ensure argocd repo and app
        shell: bash
        run: |

          # Connects the argocd repo
          repo="https://github.com/${{'${{ github.repository_owner }}'}}/${{values.app_name}}.git"
          argocd repo list | grep -q $repo || argocd repo add $repo

          # Creates the argocd app
          argocd app get ${{values.app_name}} || argocd app create ${{values.app_name}} \
            --repo $repo \
            --path charts/${{values.app_name}} \
            --dest-namespace ${{values.app_env}} \
            --dest-server https://kubernetes.default.svc \
            --values values-${{values.app_env}}.yaml \
            --revision main \
            --sync-policy manual \
            --sync-option CreateNamespace=true

      - name: Argocd app sync
        shell: bash
        run: |
          argocd app sync ${{values.app_name}}        
